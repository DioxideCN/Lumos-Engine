import de.undercouch.gradle.tasks.download.Download

plugins {
    id 'java'
    id 'java-library'
    id "io.freefair.lombok" version "6.3.0"
    id "de.undercouch.download" version "5.0.1"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = "cn.dioxide.app"
version = "1.0.0"

ext {
    spigotVersion = "1.20.1-R0.1-SNAPSHOT"
    annotationVersion = "23.0.0"
    lombokVersion = "1.18.28"
}

def buildToolsDir = new File(buildDir, "buildtools")
def buildToolsJar = new File(buildDir, "buildtools/BuildTools.jar")
def spigotJar = new File(buildToolsDir, "spigot-${spigotVersion}.jar")
def outputShadeJar = new File(buildDir, "libs/LumosEngine-${version}-all.jar")
def specialSourceJar = new File(buildDir, "specialsource/SpecialSource.jar")
def ssiJar = new File(buildDir, "specialsource/LumosEngine-${version}-all.jar")
def ssobfJar = new File(buildDir, "specialsource/LumosEngine-${version}-rmo.jar")
def ssJar = new File(buildDir, "specialsource/LumosEngine-${version}-rma.jar")
def specialSourceFolder = new File(buildDir, "specialsource")
def homePath = System.properties['user.home']
def m2 = new File(homePath + "/.m2/repository")
def m2s = m2.getAbsolutePath()

dependencies {
    implementation project(":Lumos-Spigot")
    implementation project(":Lumos-Common")
    implementation project(":Lumos-Web")
}

// ****** 混淆构建

// 下载SpecialSource
tasks.register('downloadSpecialSource', Download) {
    group 'setup'
    src "https://repo.maven.apache.org/maven2/net/md-5/SpecialSource/1.11.0/SpecialSource-1.11.0-shaded.jar"
    dest specialSourceJar
    onlyIf { !specialSourceJar.exists() }
}

tasks.register('copyBuildToSpecialSource', Copy) {
    group "remapping"
    from outputShadeJar
    into specialSourceFolder
    dependsOn(downloadSpecialSource, shadowJar)
}

// ssiJar 和 ssobfJar 进行混淆 得到-rmo.jar
tasks.register('specialSourceRemapObfuscate', JavaExec) {
    group 'remapping'
    dependsOn(copyBuildToSpecialSource, downloadSpecialSource, shadowJar)
    workingDir = specialSourceFolder
    classpath = files(specialSourceJar,
            new File(m2s + "/org/spigotmc/spigot/" + spigotVersion + "/spigot-" + spigotVersion + "-remapped-mojang.jar"))
    mainClass = "net.md_5.specialsource.SpecialSource"
    args = [
            "--live",
            "-i",
            ssiJar.getName(),
            "-o",
            ssobfJar.getName(),
            "-m",
            m2s + "/org/spigotmc/minecraft-server/" + spigotVersion + "/minecraft-server-" + spigotVersion + "-maps-mojang.txt",
            "--reverse",
    ]
}

// ssobfJar 和 ssJar 进行混淆 得到-rma.jar
tasks.register('specialSourceRemap', JavaExec) {
    group 'remapping'
    dependsOn(specialSourceRemapObfuscate)
    workingDir = specialSourceFolder
    classpath = files(specialSourceJar,
            new File(m2s + "/org/spigotmc/spigot/" + spigotVersion + "/spigot-" + spigotVersion + "-remapped-obf.jar"))
    mainClass = "net.md_5.specialsource.SpecialSource"
    args = [
            "--live",
            "-i",
            ssobfJar.getName(),
            "-o",
            ssJar.getName(),
            "-m",
            m2s + "/org/spigotmc/minecraft-server/" + spigotVersion + "/minecraft-server-" + spigotVersion + "-maps-spigot.csrg"
    ]
}

// 将最终的ssJar拷贝到外部并重命名
tasks.register('lumos', Copy) {
    group "lumos"
    from ssJar
    into buildDir
    rename { String fileName ->
        fileName.replace('LumosEngine-' + version + '-rma.jar', "LumosEngine-" + version + ".jar")
    }
    dependsOn(specialSourceRemap)
}

// ****** shadowJar Task

shadowJar {
    append("plugin.yml")
    dependencies {
        exclude(dependency('org.jetbrains:annotations'))
        exclude(dependency('org.jetbrains.kotlin:kotlin-stdlib-common'))
        exclude(dependency('org.jetbrains.kotlin:kotlin-stdlib'))
        exclude(dependency('com.google.code.gson:gson:2.10'))
        exclude(dependency('com.google.protobuf:protobuf-java'))
        exclude(dependency('com.mysql:mysql-connector-j:8.0.33'))
        exclude(dependency('org.mybatis:mybatis:3.5.13'))
        exclude(dependency('com.zaxxer:HikariCP:5.0.1'))
    }

    archiveBaseName.set("LumosEngine")
    archiveVersion.set("${project.version}")
    archiveClassifier.set('all')
}

// ****** 构建辅助性BuildTools

// 下载BuildTools
task downloadBuildTools(type: Download) {
    group 'setup'
    src "https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar"
    dest buildToolsJar
    onlyIf { !buildToolsJar.exists() }
}

// 构建BuildTools
tasks.register('buildSpigot', JavaExec) {
    dependsOn downloadBuildTools
    group 'setup'
    classpath = files(buildToolsJar)
    args = [
            "--rev",
            "1.20.1",
            "--compile",
            "craftbukkit",
            "--remap"
    ]
    workingDir = buildToolsDir
    doLast {
        configurations.runtimeClasspath.files { it.name.startsWith("spigot") }
    }
    onlyIf { !spigotJar.exists() }
}

// ****** all project

allprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal {
            content {
                includeGroup("org.bukkit")
                includeGroup("org.spigotmc")
            }
        }
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        maven { url 'https://papermc.io/repo/repository/maven-public/' }
        maven { url 'https://oss.sonatype.org/content/groups/public/' }
        maven { url 'https://repo.codemc.org/repository/maven-public/' }
        maven { url 'https://repo.dmulloy2.net/repository/public/' }
        mavenLocal()
    }

    dependencies {
        compileOnly "org.spigotmc:spigot-api:${spigotVersion}"
        compileOnly "org.spigotmc:minecraft-server:${spigotVersion}"
        compileOnly "org.bukkit:craftbukkit:${spigotVersion}:remapped-mojang"
        compileOnly "org.jetbrains:annotations:$annotationVersion"
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        testImplementation platform("org.junit:junit-bom:5.9.1")
        testImplementation "org.junit.jupiter:junit-jupiter"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    }

    shadowJar {
        append("plugin.yml")
    }
}

// ****** children project

subprojects {
    configurations.configureEach {
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds' // Do not cache dynamic versions
    }
    artifacts {
        archives shadowJar
    }
    tasks.test {
        useJUnitPlatform()
    }
}

// ****** other

compileJava {
    options.compilerArgs << '-parameters'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
